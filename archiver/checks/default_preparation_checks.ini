# the commands assume that the working directory is the archive directory

[check_readme_present]
precondition=
precondition_failure_msg=
check_cmd=find . -maxdepth 1 -iname 'readme*' | grep -i readme
success_conditions=RETURN_ZERO
check_failure_msg=Could not find a README.md or README.txt file at the top level.

[check_all_files_readable]
precondition=
precondition_failure_msg=
check_cmd=find . ! -readable ! -type l
success_conditions=RETURN_ZERO, EMPTY_OUTPUT
check_failure_msg=Found files or directories which not readable. Archive creation will fail.

[check_no_broken_links]
precondition=find --version | grep 'GNU findutils'
precondition_failure_msg=Requires GNU find. On mac, you can install it using 'brew install findutils'
check_cmd=find . -xtype l
success_conditions=RETURN_ZERO, EMPTY_OUTPUT
check_failure_msg=Found broken symlinks. Archives may not be complete.

[check_symlinks_within_dir_only]
precondition=find --version | grep 'GNU findutils'
precondition_failure_msg=Requires GNU find. On mac, you can install it using 'brew install findutils'
# for every link, resolve path relative to archive dir, if not within archive dir, print absolute
# note, that the second -exec will only be executed if the previous exec was successful
check_cmd=find . -type l ! -xtype l -exec sh -c "realpath --relative-base . {} | grep --quiet '^/' " \; -exec echo {} \;
success_conditions=EMPTY_OUTPUT
check_failure_msg=Found symlinks pointing outside the directory tree of {WDIR}. Archives may not be complete.

[check_no_absolute_symlinks]
precondition=find --version | grep 'GNU findutils'
precondition_failure_msg=Requires GNU find. On mac, you can install it using 'brew install findutils'
check_cmd=find . -type l ! -xtype l -lname '/*'
success_conditions=RETURN_ZERO, EMPTY_OUTPUT
check_failure_msg=Absolute symlinks found, see output. Archives may not be complete.
 Consider running 'symlinks -rct {WDIR}' (show what would be done) and 'symlinks -rc {WDIR}' to actually fix.

[check_no_temporary_files]
precondition=
precondition_failure_msg=
check_cmd=find . -name '*.tmp' -o -name 'tmp_*' -o -name '.DS_Store'
success_conditions=RETURN_ZERO, EMPTY_OUTPUT
check_failure_msg=Found files looking like temporary files not potentially not needing archiving.

[check_no_large_duplicates]
# check inspired by https://unix.stackexchange.com/questions/285924/how-to-compare-a-programs-version-in-a-shell-script
precondition=printf "%%s\n%%s\n" "1.19" "$(jdupes -v | sed -E -n 's/.*jdupes ([1-9].[0-9]+).*/\1/p')" | sort -V -c
# need version 1.19 since semantics of filters have changed with that version.
precondition_failure_msg=jdupes could not be executed sucessfully, need at least version 1.19. Is it installed?
check_cmd=jdupes -X size+=:1M --hard-links --recurse --print-summarize .
success_conditions=RETURN_ZERO, CONTAINS("No duplicates found.")
check_failure_msg=Found some larger duplicate files.
 Review the output and consider running 'jdupes -X size+=:1M --hard-links --recurse --link-soft {WDIR}' to softlink duplicate files to save space.
